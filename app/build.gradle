apply plugin: 'com.android.application'
apply plugin: 'com.github.triplet.play'

apply from: '../common-functions.gradle'

android {
    compileSdkVersion project.ext.compileSdkVersion
    buildToolsVersion project.ext.buildToolsVersion

    signingConfigs {
        if (hasLocalProperty("ie.macinnes.keystore")) {
            release {
                storeFile rootProject.file(getLocalProperty("ie.macinnes.keystore"))
                storePassword getLocalProperty("ie.macinnes.keystorePassword")
                keyAlias getLocalProperty('ie.macinnes.keyAlias')
                keyPassword getLocalProperty('ie.macinnes.keyPassword')
            }
        }
    }

    playAccountConfigs {
        if (hasLocalProperty("ie.macinnes.playServiceAccount")) {
            defaultplayAccountConfig {
                jsonFile = rootProject.file(getLocalProperty("ie.macinnes.playServiceAccount"))
            }
        }
    }

    defaultConfig {
        applicationId "ie.macinnes.tvheadend"
        minSdkVersion project.ext.minSdkVersion
        targetSdkVersion project.ext.targetSdkVersion

        versionCode computeVersionCode()
        versionName computeVersionName()

        setProperty("archivesBaseName", applicationId)

        buildConfigField "boolean", "ACRA_ENABLED", "false"
        buildConfigField "String", "ACRA_REPORT_URI", "\"\""

        if (playAccountConfigs.hasProperty("defaultplayAccountConfig")) {
            playAccountConfig = playAccountConfigs.defaultplayAccountConfig
        }
    }

    buildTypes {
        debug {
            versionNameSuffix "-SNAPSHOT"
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'

            if (signingConfigs.hasProperty("release")) {
                signingConfig signingConfigs.release
            }

            if (hasLocalProperty("ie.macinnes.acraReportUri")) {
                buildConfigField "boolean", "ACRA_ENABLED", "true"
                buildConfigField "String", "ACRA_REPORT_URI", "\"" + getLocalProperty("ie.macinnes.acraReportUri") + "\""
            }
        }
    }

    productFlavors {
    }

    lintOptions {
        disable 'GoogleAppIndexingWarning'
    }
}

play {
    if (hasProperty('playStoreTrack')) {
        track = property('playStoreTrack')
    } else {
        track = 'alpha'
    }

    untrackOld = true
    errorOnSizeLimit = true
    uploadImages = true
}

repositories {
    flatDir {
        dirs 'libs'
    }
}

dependencies {
    compile 'ie.macinnes.htsp:android-htsp:v0.0.1a22'
    // Used for testing local HTSP lib builds
//    compile(name: 'library-debug', ext: 'aar')
    compile fileTree(include: ['*.jar'], dir: 'libs')
    compile 'com.android.support:support-v4:25.3.1'
    compile 'com.android.support:leanback-v17:25.3.1'
    compile 'com.android.support:preference-leanback-v17:25.3.1'
    compile 'com.google.android.exoplayer:exoplayer-core:r2.4.0k2'
    compile 'com.google.android.exoplayer:exoplayer-ui:r2.4.0k2'
    compile 'com.google.android.exoplayer:extension-ffmpeg:r2.4.0k2'
    // Used for testing local exoplayer builds
//    compile(name: 'library-core-release', ext: 'aar')
//    compile(name: 'library-ui-release', ext: 'aar')
//    compile(name: 'extension-ffmpeg-release', ext: 'aar')
    compile 'ch.acra:acra:4.9.2'

    debugCompile 'com.squareup.leakcanary:leakcanary-android:1.5'
    releaseCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
    testCompile 'com.squareup.leakcanary:leakcanary-android-no-op:1.5'
}
